generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum SplitType {
  EQUAL
  PERCENTAGE
  EXACT
  SHARES
}

enum GroupCategory {
  GENERAL
  TRIP
  HOME
  COUPLE
  FRIENDS
  WORK
  PROJECT
  EVENT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  PAYPAL
  VENMO
  CASHAPP
  ZELLE
  UPI
  OTHER
}

enum SettlementStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum ReminderType {
  PAYMENT_DUE
  SETTLEMENT_RECEIVED
  EXPENSE_ADDED
  GROUP_INVITE
  CUSTOM
}

enum NotificationType {
  GENERAL
  EXPENSE_ADDED
  SETTLEMENT_MADE
  PAYMENT_RECEIVED
  GROUP_INVITE
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
  REMINDER
}

enum ActivityType {
  EXPENSE_CREATED
  EXPENSE_UPDATED
  EXPENSE_DELETED
  SETTLEMENT_MADE
  SETTLEMENT_RECEIVED
  GROUP_CREATED
  GROUP_JOINED
  GROUP_LEFT
  MEMBER_ADDED
  MEMBER_REMOVED
}
 

model User {
  id              String   @id @default(cuid())
  name            String
  userName        String   @unique
  email           String   @unique
  password        String
  phone           String?
  avatar          String?
  timezone        String   @default("IST")
  currency        String   @default("INR")
  isActive        Boolean  @default(true)
  isOnline        Boolean  @default(false)
  lastActiveAt    DateTime?
  lastLoginAt     DateTime?
  refreshToken    String?  
  otp                 String?
  otpExpiry           DateTime?
  isOtpVerified       Boolean            @default(false)
  otpAttempts         Int                @default(0)
  otpBlockedUntil     DateTime?


  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
   
  groups          GroupMember[]
  createdGroups   Group[]      @relation("GroupCreatedBy")
  expenses        Expense[]    @relation("ExpensePaidBy")
  splits          Split[]
  settlements     Settlement[] @relation("SettlementPaidBy")
  receivedPayments Settlement[] @relation("SettlementPaidTo")
  reminders       Reminder[]
  notifications   Notification[]
  friendships     Friendship[] @relation("UserFriendships")
  friendOf        Friendship[] @relation("FriendOf")
  activities      Activity[]
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  currency    String   @default("USD")
  category    GroupCategory @default(GENERAL)
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     User          @relation("GroupCreatedBy", fields: [createdBy], references: [id])
  members     GroupMember[]
  expenses    Expense[]
  settlements Settlement[]
  invites     GroupInvite[]
  activities  Activity[]
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupInvite {
  id        String      @id @default(cuid())
  groupId   String
  email     String
  token     String      @unique
  status    InviteStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime    @default(now())

  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, email])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend    User @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Expense {
  id          String   @id @default(cuid())
  groupId     String?
  paidById    String
  description String
  amount      Float
  currency    String @default("USD")
  splitType   SplitType @default(EQUAL)
  date        DateTime @default(now())
  isSettled   Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidBy    User     @relation("ExpensePaidBy", fields: [paidById], references: [id])
  splits    Split[]
  receipts  Receipt[]
  tags      ExpenseTag[]
  activities Activity[]
}

model Split {
  id         String  @id @default(cuid())
  expenseId  String
  userId     String
  amount     Float
  percentage Float?
  isSettled  Boolean @default(false)

  expense    Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user       User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
}

model Settlement {
  id          String   @id @default(cuid())
  groupId     String?
  paidById    String
  paidToId    String
  amount      Float
  currency    String @default("USD")
  description String?
  method      PaymentMethod @default(CASH)
  status      SettlementStatus @default(PENDING)
  settledAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group     Group? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidBy    User   @relation("SettlementPaidBy", fields: [paidById], references: [id])
  paidTo    User   @relation("SettlementPaidTo", fields: [paidToId], references: [id])
  activities Activity[]
}

model Receipt {
  id        String   @id @default(cuid())
  expenseId String
  fileName  String
  fileUrl   String
  fileSize  Int?
  mimeType  String?
  uploadedAt DateTime @default(now())

  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String   @default("#6B7280")
  description String?
  expenses    ExpenseTag[]
}

model ExpenseTag {
  expenseId String
  tagId     String

  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([expenseId, tagId])
}

model Reminder {
  id          String      @id @default(cuid())
  userId      String
  type        ReminderType @default(PAYMENT_DUE)
  title       String
  message     String
  isRead      Boolean     @default(false)
  scheduledFor DateTime?
  createdAt   DateTime    @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  type       NotificationType @default(GENERAL)
  title      String
  message    String
  data       Json?            
  isRead     Boolean          @default(false)
  seen       Boolean          @default(false)  
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])  
  @@map("notifications")
}



model Activity {
  id          String   @id @default(cuid())
  userId      String
  groupId     String?
  expenseId   String?
  settlementId String?
  type        ActivityType
  action      String
  metadata    Json?
  createdAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  group       Group? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  expense     Expense? @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  settlement  Settlement? @relation(fields: [settlementId], references: [id], onDelete: Cascade)
}
